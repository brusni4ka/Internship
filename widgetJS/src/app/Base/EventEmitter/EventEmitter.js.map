{"version":3,"sources":["Base/EventEmitter/EventEmitter.js"],"names":["EventEmitter","listeners","Map","label","callback","has","set","get","push","isFunction","obj","index","length","reduce","i","listener","splice","args","forEach"],"mappings":";;;;;;;;;;AAAA;;;IAGqBA,Y;AACnB;AACA,0BAAc;AAAA;;AACZ,SAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;AACD;;;;gCACWC,K,EAAOC,Q,EAAU;AAC3B,WAAKH,SAAL,CAAeI,GAAf,CAAmBF,KAAnB,KAA6B,KAAKF,SAAL,CAAeK,GAAf,CAAmBH,KAAnB,EAA0B,EAA1B,CAA7B;AACA,WAAKF,SAAL,CAAeM,GAAf,CAAmBJ,KAAnB,EAA0BK,IAA1B,CAA+BJ,QAA/B;AACD;;;mCACcD,K,EAAOC,Q,EAAU;AAC9B,UAAIK,aAAa,SAAbA,UAAa,CAASC,GAAT,EAAc;AAC7B,eAAO,OAAOA,GAAP,KAAe,UAAf,IAA6B,KAApC;AACD,OAFD;;AAIA,UAAIT,YAAY,KAAKA,SAAL,CAAeM,GAAf,CAAmBJ,KAAnB,CAAhB;AAAA,UACEQ,cADF;;AAGA,UAAIV,aAAaA,UAAUW,MAA3B,EAAmC;AACjCD,gBAAQV,UAAUY,MAAV,CAAiB,UAACC,CAAD,EAAIC,QAAJ,EAAcJ,KAAd,EAAwB;AAC/C,iBAAQF,WAAWM,QAAX,KAAwBA,aAAaX,QAAtC,GACLU,IAAIH,KADC,GAELG,CAFF;AAGD,SAJO,EAIL,CAAC,CAJI,CAAR;;AAMA,YAAIH,QAAQ,CAAC,CAAb,EAAgB;AACdV,oBAAUe,MAAV,CAAiBL,KAAjB,EAAwB,CAAxB;AACA,eAAKV,SAAL,CAAeK,GAAf,CAAmBH,KAAnB,EAA0BF,SAA1B;AACA,iBAAO,IAAP;AACD;AACF;AACD,aAAO,KAAP;AACD;;;yBACIE,K,EAAgB;AAAA,wCAANc,IAAM;AAANA,YAAM;AAAA;;AACnB,UAAIhB,YAAY,KAAKA,SAAL,CAAeM,GAAf,CAAmBJ,KAAnB,CAAhB;;AAEA,UAAIF,aAAaA,UAAUW,MAA3B,EAAmC;AACjCX,kBAAUiB,OAAV,CAAkB,UAACH,QAAD,EAAc;AAC9BA,oCAAYE,IAAZ;AACD,SAFD;AAGA,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;;;;;kBA1CkBjB,Y","file":"EventEmitter.js","sourcesContent":["/**\n * Created by kate on 10/11/16.\n */\nexport default class EventEmitter{\n  //contains a list of views\n  constructor() {\n    this.listeners = new Map();\n  }\n  addListener(label, callback) {\n    this.listeners.has(label) || this.listeners.set(label, []);\n    this.listeners.get(label).push(callback);\n  }\n  removeListener(label, callback) {\n    let isFunction = function(obj) {\n      return typeof obj === 'function' || false;\n    };\n\n    let listeners = this.listeners.get(label),\n      index;\n\n    if (listeners && listeners.length) {\n      index = listeners.reduce((i, listener, index) => {\n        return (isFunction(listener) && listener === callback) ?\n          i = index :\n          i;\n      }, -1);\n\n      if (index > -1) {\n        listeners.splice(index, 1);\n        this.listeners.set(label, listeners);\n        return true;\n      }\n    }\n    return false;\n  }\n  emit(label, ...args) {\n    let listeners = this.listeners.get(label);\n\n    if (listeners && listeners.length) {\n      listeners.forEach((listener) => {\n        listener(...args);\n      });\n      return true;\n    }\n    return false;\n  }\n}\n"]}